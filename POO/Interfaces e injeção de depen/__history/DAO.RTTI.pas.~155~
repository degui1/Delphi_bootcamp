unit DAO.RTTI;

interface

uses
  System.RTTI, System.SysUtils, Vcl.Forms;

type

  TAttrType = (tpString, tpInteger, tpID);

  TFormFields = class(TCustomAttribute)
    private
    FFormField: String;
    procedure SetFormField(const Value: String);
    public
      constructor Create ( aFormField : String );
      property FormField: String read FFormField write SetFormField;
  end;

  TableName = class(TCustomAttribute)
    private
    FTableName: String;
    procedure SetTableName(const Value: String);
    public
      constructor Create ( aTableName : String );
      property TableName: String read FTableName write SetTableName;
  end;

  FieldType = class(TCustomAttribute)
    private
    FAttrType: TAttrType;
    procedure SetAttrType(const Value: TAttrType);
    public
      constructor Create ( aFieldType : TAttrType );
      property AttrType : TAttrType read FAttrType write SetAttrType;
  end;


  TDAORTTI = class
    private
    public
      class function getInsertSQL<T : class> ( aEntity : T ) : String;
      class function getDeleteSQL<T : class> ( aEntity : T ) : String;
      class function getUpdateSQL<T : class> ( aEntity : T; aForm : TForm ) : String;
  end;
implementation

uses
  Vcl.StdCtrls;

{ TDAORTTI }

class function TDAORTTI.getDeleteSQL<T>(aEntity: T): String;
var
  ctx: TRttiContext;
  typeRtti : TRttiType;
  props : TRttiProperty;
  Attr : TCustomAttribute;
  FTableName : String;
begin
  ctx := TRttiContext.Create;
  try
    typeRtti := ctx.GetType(aEntity.ClassInfo);

    for Attr in typeRtti.GetAttributes do
      if Attr is TableName then
        FTableName := TableName(attr).TableName;

    Result := 'DELETE FROM ' + FTableName + ' WHERE ';

    for props in typeRtti.GetProperties do
    begin
      for Attr in props.GetAttributes do
      begin
        if Attr is FieldType then
        begin
          case FieldType(Attr).AttrType of
            tpID: Result := Result + props.Name + ' = ' + (props.GetValue(Pointer(aEntity)).AsInteger).ToString;
          end;
        end;
      end;
    end;



  finally
    ctx.Free;
  end;
end;

class function TDAORTTI.getInsertSQL<T>(aEntity: T): String;
var
  ctx : TRttiContext;
  _type : TRttiType;
  props : TRttiProperty;
  attr : TCustomAttribute;
  FTableName : String;
begin
  ctx := TRttiContext.Create;
  try
    _type := ctx.GetType(aEntity.ClassInfo);

    for attr in _type.GetAttributes do
        if attr is TableName then
          FTableName := TableName(attr).TableName;


    Result := 'INSERT INTO ' + FTableName + '(';

    for props in _Type.GetProperties do
    begin
      Result := Result + props.Name + ',';
    end;

    Result := Copy(Result, 0, Length(Result) -1);

    Result := Result + ') VALUES (';

    for props in _Type.GetProperties do
    begin
      for Attr in props.GetAttributes do
      begin
        if Attr is FieldType then
        begin
          case FieldType(attr).AttrType of
            tpInteger: Result := Result + (props.GetValue(Pointer(aEntity)).AsInteger).ToString + ',';
            tpString:  Result := Result + QuotedStr(props.GetValue(Pointer(aEntity)).AsString) + ',';
            tpID: Result := Result + (props.GetValue(Pointer(aEntity)).AsInteger).ToString + ',';
          end;
        end;
      end;
    end;

    Result := Copy(Result, 0, Length(Result) -1);

    Result := Result + ')';
  finally
    ctx.Free;
  end;
end;

class function TDAORTTI.getUpdateSQL<T>(aEntity: T; aForm : TForm): String;
var
  ctx: TRttiContext;
  typeRtti : TRttiType;
  typeRttiForm: TRttiType;
  fieldForm : TRttiField;
  props : TRttiProperty;
  Attr : TCustomAttribute;
  AttrForm : TCustomAttribute;
  FTableName : String;
begin
  ctx := TRttiContext.Create;
  try
    typeRtti := ctx.GetType(aEntity.ClassInfo);

    for Attr in typeRtti.GetAttributes do
      if Attr is TableName then
        FTableName := TableName(attr).TableName;

    Result := 'UPDATE FROM ' + FTableName + ' SET ';

    for props in typeRtti.GetProperties do
    begin
      for Attr in props.GetAttributes do
        if Attr is FieldType then
        begin
          typeRttiForm := ctx.GetType(aForm.ClassType);
          for fieldForm in typeRttiForm.GetFields do
          begin
            for AttrForm in fieldForm.GetAttributes do
            begin
              if AttrForm is TFormFields then
              begin
                case FieldType(Attr).AttrType of
                tpString :
                begin
                  Result := Result + props.Name + ' = ' + TEdit(fieldForm).TExt + ',';
                end;
                tpInteger :
                begin
                  Result := Result + props.Name + ' = ' + (props.GetValue(Pointer(aEntity)).AsInteger).ToString + ',';
                end;
              end;
            end;
          end;
        end;
      end;
    end;

    Result := Copy(Result, 0, Length(Result) -1);

    Result := Result + '    WHERE ';

    for props in typeRtti.GetProperties do
    begin
      for Attr in props.GetAttributes do
      begin
        if Attr is FieldType then
        begin
          case FieldType(Attr).AttrType of
            tpID : Result := Result + props.Name + ' = ' + (props.GetValue(Pointer(aEntity)).AsInteger).ToString;
          end;
        end;
      end;
    end;

  finally
    ctx.Free;
  end;
end;

{ TableName }

constructor TableName.Create(aTableName: String);
begin
  FTableName :=aTableName;
end;

procedure TableName.SetTableName(const Value: String);
begin
  FTableName := Value;
end;

{ FieldType }

constructor FieldType.Create(aFieldType: TAttrType);
begin
  FAttrType := aFieldType;
end;

procedure FieldType.SetAttrType(const Value: TAttrType);
begin
  FAttrType := Value;
end;

{ TFormFields }

constructor TFormFields.Create(aFormField: String);
begin
  FFormField := aFormField;
end;

procedure TFormFields.SetFormField(const Value: String);
begin
  FFormField := Value;
end;

end.
